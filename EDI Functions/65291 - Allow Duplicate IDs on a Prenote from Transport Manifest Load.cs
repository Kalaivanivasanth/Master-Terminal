using Microsoft.VisualStudio.TestTools.UnitTesting;
using MTNBaseClasses.BaseClasses.MasterTerminal;
using MTNForms.Controls;
using MTNUtilityClasses.Classes;
using System;
using MTNForms.FormObjects;
using DataObjects.LogInOutBO;
using DataObjects;
using MTNForms.FormObjects.Gate_Functions;
using MTNForms.FormObjects.Message_Dialogs;

namespace MTNAutomationTests.TestCases.Master_Terminal.EDI_Functions
{
    [TestClass, TestCategory(TestCategories.MTN)]
    public class TestCase65291 : MTNBase
    {
        CallAPI callAPI;
        GetSetArgumentsToCallAPI setArgumentsToCallAPI;
        string baseURL;

        PreNoteForm _preNoteForm;
        private WarningErrorForm _warningError;
        private ConfirmationFormYesNo _confirmationForm;

        const string TerminalId = "MTNQ";

        [ClassInitialize]
        public static void ClassInitialize(TestContext testContext) => BaseClassInitialize_New(testContext);

        [TestInitialize]
        public new void TestInitialize() { }

        [TestCleanup]
        public new void TestCleanup() => base.TestCleanup();

        void MTNInitialize()
        {
            TestRunDO.GetInstance().SetKillBPGToFalse();
            TestRunDO.GetInstance().SetDoResetConfigsToFalse();
            baseURL = TestContext.GetRunSettingValue(@"BaseUrl");
            LogInto<MTNLogInOutBO>(@"USER65291");
        }

        /// <summary>
        /// This test ensures that duplicate ID prenotes are created from a transport manifest load.
        /// </summary>
        [TestMethod]
        public void AllowDuplicateIDsOnAPrenoteFromTransportManifestLoad()
        {
            MTNInitialize();

            // Go to the prenotes form and delete any existing prenotes for the cargo ID starts with PE0
            FormObjectBase.NavigationMenuSelection(@"Gate Functions|Pre-Notes");
            _preNoteForm = new PreNoteForm(formTitle: $"Pre-Notes {TerminalId}");

            MTNControlBase.SetValueInEditTable(_preNoteForm.tblPreNoteSearch, @"Cargo Id", @"PE0");
            _preNoteForm.DoSearch();

            var rowFound = MTNControlBase.FindClickRowInTable(_preNoteForm.tblPreNotes, "ID^PE051~Cargo Group^PE051CG", rowHeight: 18, doAssert: false, clickType: ClickType.None);

            if (rowFound)
            {
                _preNoteForm.DoSelectAll();
                _preNoteForm.DoDelete();

                _confirmationForm = new ConfirmationFormYesNo(@"Confirm Deletion");
                _confirmationForm.btnYes.DoClick();

                _warningError = new WarningErrorForm(formTitle: $"Warnings for Delete Pre-Note {TerminalId}");
                _warningError.btnSave.DoClick();
            }

            // Load the Transport Manifest
            Miscellaneous.WaitForSeconds(3);
            SetupAndLoadInitializeData(TestContext);

            // Do a search for the cargo ID starts with PE0 and check the status bar total 
            _preNoteForm.DoSearch();

            var mismatchFound = string.Empty;
            _preNoteForm.CheckStatusBarTotal(@"2125", 20, ref mismatchFound);

            // Check for the duplicate prenotes for the cargo ID with PE051 with different cargo groups
            MTNControlBase.FindClickRowInTable(_preNoteForm.tblPreNotes, "ID^PE051~Cargo Group^PE051CG", rowHeight: 18, clickType: ClickType.None);
            MTNControlBase.FindClickRowInTable(_preNoteForm.tblPreNotes, "ID^PE051~Cargo Group^PE052CG", rowHeight: 18, clickType: ClickType.None);

        }


        private void SetupAndLoadInitializeData(TestContext testContext)
        {
            string data = "{\"clientRef\": \"REF\",\"messageType\": \"Transport Manifest\",\"synchronous\": true,\"message\": \"\"}";
            callAPI = new CallAPI();
            setArgumentsToCallAPI = new GetSetArgumentsToCallAPI();
            setArgumentsToCallAPI.MessageBody = data;
            setArgumentsToCallAPI.Authorization = "Bearer";
            setArgumentsToCallAPI.RequestURL = baseURL + "SendEDI?MasterTerminalAPI";
            setArgumentsToCallAPI.UserName = "USER65291";
            setArgumentsToCallAPI.Password = "Password1*";
            setArgumentsToCallAPI.TerminalId = "MTNQ";
            setArgumentsToCallAPI.OperatorId = "EuroPorts";
            var response = callAPI.DoCallAPI(setArgumentsToCallAPI);
            Assert.IsTrue(response.Result.IsSuccessStatusCode, "Response is :" + response.Result.StatusCode + response.Result.ReasonPhrase + response.Result.RequestMessage.ToString());
            Console.WriteLine("Response is :" + response.Result.StatusCode + response.Result.ReasonPhrase + response.Result.RequestMessage.ToString());

        }

    }

}

